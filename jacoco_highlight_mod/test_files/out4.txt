diff --git a/h2o-algos/src/main/java/hex/deeplearning/DeepLearningModel.java b/h2o-algos/src/main/java/hex/deeplearning/DeepLearningModel.java
index 8611bf2..36cc971 100755
--- a/h2o-algos/src/main/java/hex/deeplearning/DeepLearningModel.java
+++ b/h2o-algos/src/main/java/hex/deeplearning/DeepLearningModel.java
@@ -2158,6 +2158,7 @@ public class DeepLearningModel extends Model<DeepLearningModel,DeepLearningModel
                   ) {
             if (f.getName().equals("_hidden")) continue;
             if (f.getName().equals("_ignored_columns")) continue;
+	    if (f.getName().equals("$jacocoData")) continue; // If code coverage is enabled
             throw H2O.unimpl("Please add " + f.getName() + " to either cp_modifiable or cp_not_modifiable");
           }
       }
diff --git a/h2o-core/src/main/java/hex/Model.java b/h2o-core/src/main/java/hex/Model.java
index 20c49a7..68a5661 100755
--- a/h2o-core/src/main/java/hex/Model.java
+++ b/h2o-core/src/main/java/hex/Model.java
@@ -1,10 +1,18 @@
 package hex;
 
+import hex.genmodel.GenModel;
 import hex.genmodel.easy.EasyPredictModelWrapper;
 import hex.genmodel.easy.RowData;
 import hex.genmodel.easy.exception.PredictException;
 import hex.genmodel.easy.prediction.*;
 import org.joda.time.DateTime;
+import water.*;
+import water.api.StreamWriter;
+import water.codegen.CodeGenerator;
+import water.codegen.CodeGeneratorPipeline;
+import water.exceptions.JCodeSB;
+import water.fvec.*;
+import water.util.*;
 
 import java.io.ByteArrayOutputStream;
 import java.io.OutputStream;
@@ -14,15 +22,6 @@ import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Random;
 
-import hex.genmodel.GenModel;
-import water.*;
-import water.api.StreamWriter;
-import water.codegen.CodeGenerator;
-import water.codegen.CodeGeneratorPipeline;
-import water.exceptions.JCodeSB;
-import water.fvec.*;
-import water.util.*;
-
 import static hex.ModelMetricsMultinomial.getHitRatioTable;
 
 /**
@@ -616,6 +615,8 @@ public abstract class Model<M extends Model<M,P,O>, P extends Model.Parameters,
       }
       if( vec != null ) {          // I have a column with a matching name
         if( domains[i] != null ) { // Model expects an categorical
+          if (vec.isString())
+            vec = VecUtils.stringToCategorical(vec); //turn a String column into a categorical column (we don't delete the original vec here)
           if( vec.domain() != domains[i] && !Arrays.equals(vec.domain(),domains[i]) ) { // Result needs to be the same categorical
             CategoricalWrappedVec evec;
             try {
diff --git a/h2o-core/src/main/java/water/api/HandlerFactory.java b/h2o-core/src/main/java/water/api/HandlerFactory.java
new file mode 100644
index 0000000..8ad5728
--- /dev/null
+++ b/h2o-core/src/main/java/water/api/HandlerFactory.java
@@ -0,0 +1,20 @@
+package water.api;
+
+/**
+ * Handler factory supports different strategies to
+ * create an instance of handler class for given registered route.
+ */
+public interface HandlerFactory {
+
+  /** Shared default factory to create handler by using no-arg ctor
+   * and reflection. */
+  HandlerFactory DEFAULT = new HandlerFactory() {
+
+    @Override
+    public Handler create(Class<? extends Handler> handlerClz) throws Exception {
+      return handlerClz.newInstance();
+    }
+  };
+
+  Handler create(Class<? extends Handler> handler) throws Exception;
+}
diff --git a/h2o-core/src/main/java/water/api/RequestServer.java b/h2o-core/src/main/java/water/api/RequestServer.java
index 4b2e80e..937214a 100644
--- a/h2o-core/src/main/java/water/api/RequestServer.java
+++ b/h2o-core/src/main/java/water/api/RequestServer.java
@@ -287,11 +287,12 @@ public class RequestServer extends NanoHTTPD {
    * @param handler_method name of the handler method
    * @param doc_method name of a method which returns GitHub Flavored Markdown documentation for the request
    * @param summary short help string which summarizes the functionality of this endpoint
+   * @param handler_factory factory to create instance of handler
    * @see Route
    * @see water.api.RequestServer
    * @return the Route for this request
    */
-  public static Route register(String uri_pattern_raw, String http_method, Class<? extends Handler> handler_class, String handler_method, String doc_method, String summary) {
+  public static Route register(String uri_pattern_raw, String http_method, Class<? extends Handler> handler_class, String handler_method, String doc_method, String summary, HandlerFactory handler_factory) {
     assert uri_pattern_raw.startsWith("/");
 
     // Search handler_class and all its superclasses for the method.
@@ -352,11 +353,35 @@ public class RequestServer extends NanoHTTPD {
 
     assert lookup(handler_method, uri_pattern_raw)==null; // Not shadowed
     Pattern uri_pattern = Pattern.compile(uri_pattern_raw);
-    Route route = new Route(http_method, uri_pattern_raw, uri_pattern, summary, handler_class, meth, doc_meth, params_list.toArray(new String[params_list.size()]));
+    Route route = new Route(http_method,
+                            uri_pattern_raw,
+                            uri_pattern, summary,
+                            handler_class, meth,
+                            doc_meth,
+                            params_list.toArray(new String[params_list.size()]),
+                            handler_factory);
     _routes.put(uri_pattern.pattern(), route);
     return route;
   }
 
+  /**
+   * Register an HTTP request handler method for a given URL pattern, with parameters extracted from the URI.
+   * <p>
+   * URIs which match this pattern will have their parameters collected from the path and from the query params
+   *
+   * @param uri_pattern_raw regular expression which matches the URL path for this request handler; parameters that are embedded in the path must be captured with &lt;code&gt;(?&lt;parm&gt;.*)&lt;/code&gt; syntax
+   * @param http_method HTTP verb (GET, POST, DELETE) this handler will accept
+   * @param handler_class class which contains the handler method
+   * @param handler_method name of the handler method
+   * @param doc_method name of a method which returns GitHub Flavored Markdown documentation for the request
+   * @param summary short help string which summarizes the functionality of this endpoint
+   * @see Route
+   * @see water.api.RequestServer
+   * @return the Route for this request
+   */
+  public static Route register(String uri_pattern_raw, String http_method, Class<? extends Handler> handler_class, String handler_method, String doc_method, String summary) {
+    return register(uri_pattern_raw, http_method, handler_class, handler_method, doc_method, summary, HandlerFactory.DEFAULT);
+  }
 
   // Lookup the method/url in the register list, and return a matching Method
   protected static Route lookup( String http_method, String uri ) {
@@ -397,7 +422,15 @@ public class RequestServer extends NanoHTTPD {
     for (int i = version; i > route_version && i >= Route.MIN_VERSION; i--) {
       String fallback_route_uri = "/" + i + "/" + route_m.group(2);
       Pattern fallback_route_pattern = Pattern.compile(fallback_route_uri);
-      Route generated = new Route(fallback._http_method, fallback_route_uri, fallback_route_pattern, fallback._summary, fallback._handler_class, fallback._handler_method, fallback._doc_method, fallback._path_params);
+      Route generated = new Route(fallback._http_method,
+                                  fallback_route_uri,
+                                  fallback_route_pattern,
+                                  fallback._summary,
+                                  fallback._handler_class,
+                                  fallback._handler_method,
+                                  fallback._doc_method,
+                                  fallback._path_params,
+                                  fallback._handler_factory);
       _fallbacks.put(fallback_route_pattern.pattern(), generated);
     }
 
diff --git a/h2o-core/src/main/java/water/api/Route.java b/h2o-core/src/main/java/water/api/Route.java
index 36ef928..88476db 100644
--- a/h2o-core/src/main/java/water/api/Route.java
+++ b/h2o-core/src/main/java/water/api/Route.java
@@ -1,12 +1,13 @@
 package water.api;
 
-import water.H2O;
-import water.Iced;
-import water.util.MarkdownBuilder;
+import com.google.code.regexp.Pattern;
 
 import java.lang.reflect.Method;
 import java.util.Arrays;
-import com.google.code.regexp.Pattern;
+
+import water.H2O;
+import water.Iced;
+import water.util.MarkdownBuilder;
 
 /**
 * Routing of an http request to a handler method, with path parameter parsing.
@@ -28,7 +29,16 @@ final class Route extends Iced {
   public String[] _path_params; // list of params we capture from the url pattern, e.g. for /17/MyComplexObj/(.*)/(.*)
   public Handler _handler;
 
-  public Route() { }
+  /** Handler factory configures a way how handler is instantiated.
+   *
+   * PLEASE: do not remove it even H2O is not using it. It is used by Sparkling Water, since
+   * it needs to pass a Spark context to a new handler
+   */
+  final HandlerFactory _handler_factory;
+
+  public Route() {
+    _handler_factory = null;
+  }
 
   public Route(String http_method,
                String url_pattern_raw,
@@ -37,8 +47,10 @@ final class Route extends Iced {
                Class<? extends Handler> handler_class,
                Method handler_method,
                Method doc_method,
-               String[] path_params) {
+               String[] path_params,
+               HandlerFactory handler_factory) {
     assert http_method != null && url_pattern != null && handler_class != null && handler_method != null && path_params != null;
+    assert handler_factory != null : "handler_factory should be not null, caller has to pass it!";
     _http_method = http_method;
     _url_pattern_raw = url_pattern_raw;
     _url_pattern = url_pattern;
@@ -47,8 +59,13 @@ final class Route extends Iced {
     _handler_method = handler_method;
     _doc_method = doc_method;
     _path_params = path_params;
-    try { _handler = handler_class.newInstance(); }
-    catch( Exception ie ) { H2O.fail("failed to register handler "+handler_class.getSimpleName()+"."+handler_method.getName(),ie); }
+    _handler_factory = handler_factory;
+    try {
+      _handler = _handler_factory.create(_handler_class);
+    } catch (Exception ie) {
+      H2O.fail("failed to register handler " + handler_class.getSimpleName() + "." + handler_method
+          .getName(), ie);
+    }
   }
 
   /**
diff --git a/h2o-core/src/test/java/water/TestUtil.java b/h2o-core/src/test/java/water/TestUtil.java
index 760a18d..a902393 100644
--- a/h2o-core/src/test/java/water/TestUtil.java
+++ b/h2o-core/src/test/java/water/TestUtil.java
@@ -26,6 +26,7 @@ import static org.junit.Assert.assertTrue;
 
 @Ignore("Support for tests, but no actual tests here")
 public class TestUtil extends Iced {
+  public final static boolean JACOCO_ENABLED = Boolean.parseBoolean(System.getProperty("test.jacocoEnabled", "false"));
   private static boolean _stall_called_before = false;
   protected static int _initial_keycnt = 0;
   protected static int MINCLOUDSIZE;
@@ -41,7 +42,11 @@ public class TestUtil extends Iced {
       H2O.registerRestApis(System.getProperty("user.dir"));
       _stall_called_before = true;
     }
-    H2O.waitForCloudSize(x, 30000);
+    if (JACOCO_ENABLED) {
+      H2O.waitForCloudSize(x, 300000);
+    } else {
+      H2O.waitForCloudSize(x, 30000);
+    }
     _initial_keycnt = H2O.store_size();
   }
 
diff --git a/h2o-core/src/test/java/water/api/APIThrPriorTest.java b/h2o-core/src/test/java/water/api/APIThrPriorTest.java
index d566294..1378834 100644
--- a/h2o-core/src/test/java/water/api/APIThrPriorTest.java
+++ b/h2o-core/src/test/java/water/api/APIThrPriorTest.java
@@ -54,7 +54,7 @@ public class APIThrPriorTest extends TestUtil {
   
       // Block till the builder sets _driver_priority, and is blocked on state==1
       synchronized(blder) {
-        while( blder._state == 0 ) try { blder.wait(); } catch( InterruptedException _ ) { }
+        while( blder._state == 0 ) try { blder.wait(); } catch (InterruptedException ignore) { }
         assert blder._state == 1;
       }
       int driver_prior = blder._driver_priority;
@@ -186,7 +186,7 @@ class Bogus extends ModelBuilder<BogusModel,BogusModel.BogusParameters,BogusMode
       synchronized(Bogus.this) {
         if( _state == 0 ) _state = 1;
         Bogus.this.notify();
-        while( _state==1 ) try { Bogus.this.wait(); } catch( InterruptedException _ ) { }
+        while( _state==1 ) try { Bogus.this.wait(); } catch (InterruptedException ignore) { }
       }
       tryComplete();
     }
diff --git a/h2o-core/src/test/java/water/junit/H2OTestRunner.java b/h2o-core/src/test/java/water/junit/H2OTestRunner.java
index 3eff5ba..9ce7aba 100644
--- a/h2o-core/src/test/java/water/junit/H2OTestRunner.java
+++ b/h2o-core/src/test/java/water/junit/H2OTestRunner.java
@@ -20,7 +20,6 @@ import java.util.List;
 public class H2OTestRunner {
 
   public Result run(String[] args) throws Exception {
-
     // List all classes - adapted from JUnitCore code
     List<Class<?>> classes = new ArrayList<Class<?>>();
     List<Failure> missingClasses = new ArrayList<Failure>();
@@ -51,7 +50,8 @@ public class H2OTestRunner {
 
   public static void main(String[] args) throws Exception {
     H2OTestRunner testRunner = new H2OTestRunner();
-    Result result = testRunner.run(args);
+    Result result = null;
+    result = testRunner.run(args);
     System.exit(result.wasSuccessful() ? 0 : 1);
   }
 }
diff --git a/h2o-core/src/test/java/water/parser/ParseFolderTestBig.java b/h2o-core/src/test/java/water/parser/ParseFolderTestBig.java
index 01e6fea..87d8b96 100644
--- a/h2o-core/src/test/java/water/parser/ParseFolderTestBig.java
+++ b/h2o-core/src/test/java/water/parser/ParseFolderTestBig.java
@@ -59,7 +59,7 @@ public class ParseFolderTestBig extends TestUtil {
       Job<Frame> job = ParseDataset.parse(Key.make("BIGSVM.hex"),new Key[]{nfs._key},true,ParseSetup.guessSetup(new Key[]{nfs._key}, false, ParseSetup.GUESS_HEADER),false)._job;
       while( job.progress() < 1.0 ) {
         System.out.print(((int)(job.progress()*1000.0))/10.0 + "% ");
-        try { Thread.sleep(1000); } catch( InterruptedException _ ) { /*comment to disable ideaJ warning*/}
+        try { Thread.sleep(1000); } catch (InterruptedException ignore) { /*comment to disable ideaJ warning*/}
       }
       System.out.println();
       k1 = job.get();
diff --git a/jacoco/coverage_tool/src/main/java/CoverageTool.java b/jacoco/coverage_tool/src/main/java/CoverageTool.java
new file mode 100644
index 0000000..fe4972e
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/CoverageTool.java
@@ -0,0 +1,20 @@
+import diff.*;
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.List;
+
+public class CoverageTool {
+
+
+    public void run() {
+        // STEP 1: Get a DiffReport via git diff and DiffScanner
+        // STEP 2: Iterate through the files listed in the DiffReport and generate a list of all relevant class names.
+        // STEP 3: Use this list of class names to specify what to be included when running jacoco
+        // STEP 4: Run jacoco (should we serialize the DiffReport for future use?)
+        // STEP 5: After the tests are run, find coverage results of all DiffHunks from DiffReport. Report findings.
+    }
+
+    public static void main(String[] args) {
+    }
+
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffFile.java b/jacoco/coverage_tool/src/main/java/diff/DiffFile.java
new file mode 100644
index 0000000..f28fcb7
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffFile.java
@@ -0,0 +1,90 @@
+package diff;
+
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.Collections;
+import java.util.Iterator;
+
+public class DiffFile {
+    private final Path _a_path;
+    private final Path _b_path;
+    private Comparator<DiffHunk> _comp;
+    private List<DiffHunk> _diffs;
+
+    public enum Type {
+        INSERT, DELETE, MODIFY, NONE;
+    }
+
+    public DiffFile(Path old_path, Path new_path) {
+        _a_path = old_path;
+        _b_path = new_path;
+        _diffs = new ArrayList<DiffHunk>();
+        sortByRemove();
+    }
+
+    public boolean pushDiff(DiffHunk diff) {
+        return _diffs.add(diff);
+    }
+
+    public Iterator<DiffHunk> iterator() {
+        Collections.sort(_diffs, _comp);
+        return _diffs.iterator();
+    }
+
+    public void sortByInsert() {
+        _comp = new Comparator<DiffHunk>() {
+            public int compare(DiffHunk o1, DiffHunk o2) {
+                return o1.getInsertStart() - o2.getInsertStart();
+            }
+        };
+    }
+
+    public void sortByRemove() {
+        _comp = new Comparator<DiffHunk>() {
+            public int compare(DiffHunk o1, DiffHunk o2) {
+                return o1.getRemoveStart() - o2.getRemoveStart();
+            }
+        };
+    }
+
+    public Type getType() {
+        if (!_a_path.getFileName().toString().equals("null")) {
+            if (!_b_path.getFileName().toString().equals("null")) {
+                return Type.MODIFY;
+            } else {
+                return Type.DELETE;
+            }
+        } else {
+            if (!_b_path.getFileName().toString().equals("null")) {
+                return Type.INSERT;
+            } else {
+                return Type.NONE;
+            }
+        }
+    }
+
+    /*public String getClassNameA() {
+        String class_name = "";
+        Path root = Paths.get("src/main/java");
+        for (int i = 0; i < _a_path.getNameCount() - root.getNameCount(); i += 1) {
+            if (_a_path.subpath(i, root.getNameCount()).equals(root)) {
+
+            }
+        }
+        return class_name;
+    }*/
+
+    public String toString() {
+        Iterator<DiffHunk> i = iterator();
+        String out = "DiffFile: '" + _a_path.getFileName().toString() + "' -> '" + _b_path.getFileName().toString() + "'";
+        while (i.hasNext()) out += "\n\t" + i.next().toString();
+        return out;
+    }
+
+    public static void main(String[] args) {
+    }
+
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffHunk.java b/jacoco/coverage_tool/src/main/java/diff/DiffHunk.java
new file mode 100644
index 0000000..4f515e3
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffHunk.java
@@ -0,0 +1,87 @@
+package diff;
+
+import java.lang.IllegalArgumentException;
+
+public class DiffHunk {
+    public enum Type {
+        INSERT, REMOVE, REPLACE, NONE
+    }
+
+    private final int _remove_start; // Starts with 0, add 1 for actual line number
+    private final int _insert_start; // Starts with 0, add 1 for actual line number
+
+    private int _remove_length;
+    private int _insert_length;
+
+    public DiffHunk(int remove_start, int insert_start) {
+        this(remove_start, 0, insert_start, 0);
+    }
+
+    public DiffHunk(int remove_start, int remove_length, int insert_start, int insert_length) {
+        if (remove_start < 0 || remove_length < 0 || insert_start < 0 || insert_length < 0) {
+            throw new IllegalArgumentException("Arguments must be non-negative");
+        } else {
+            _remove_start = remove_start;
+            _remove_length = remove_length;
+            _insert_start = insert_start;
+            _insert_length = insert_length;
+        }
+    }
+
+    public void pushRemove() {
+        _remove_length += 1;
+    }
+
+    public void pushRemove(int num) {
+        if (num < 0) {
+            throw new IllegalArgumentException("Argument must be non-negative");
+        } else {
+            _remove_length += num;
+        }
+    }
+
+    public void pushInsert() {
+        _insert_length += 1;
+    }
+
+    public void pushInsert(int num) {
+        if (num < 0) {
+            throw new IllegalArgumentException("Argument must be non-negative");
+        } else {
+            _insert_length += num;
+        }
+    }
+
+    public int getRemoveStart() {
+        return _remove_start;
+    }
+
+    public int getRemoveLength() {
+        return _remove_length;
+    }
+
+    public int getRemoveEnd() { return getRemoveStart() + getRemoveLength(); }
+
+    public int getInsertStart() { return _insert_start; }
+
+    public int getInsertLength() { return _insert_length; }
+
+    public int getInsertEnd() { return getInsertStart() + getInsertLength(); }
+
+    public boolean isEmpty() {
+        return (_insert_length == 0 && _remove_length == 0);
+    }
+
+    public Type getType() {
+        if (getRemoveLength() == 0 && getInsertLength() > 0) return Type.INSERT;
+        if (getRemoveLength() > 0 && getInsertLength() == 0) return Type.REMOVE;
+        if (getRemoveLength() > 0 && getInsertLength() > 0) return Type.REPLACE;
+        return Type.NONE;
+    }
+
+    public String toString() {
+        String out = String.format("DiffHunk: (%d, %d) -> (%d, %d)", _remove_start, _remove_length, _insert_start, _insert_length);
+        return out;
+    }
+
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffHunkHeader.java b/jacoco/coverage_tool/src/main/java/diff/DiffHunkHeader.java
new file mode 100644
index 0000000..2d1d68c
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffHunkHeader.java
@@ -0,0 +1,50 @@
+package diff;
+
+import java.lang.IllegalArgumentException;
+
+public class DiffHunkHeader {
+    private int _remove_start; // Starts with 0, add 1 for actual line number
+    private int _insert_start; // Starts with 0, add 1 for actual line number
+
+    public DiffHunkHeader(int remove_start, int insert_start) {
+        if (remove_start < 0 || insert_start < 0) {
+            throw new IllegalArgumentException("Arguments must be non-negative");
+        } else {
+            _remove_start = remove_start;
+            _insert_start = insert_start;
+        }
+    }
+
+    public void pushRemove() {
+        _remove_start += 1;
+    }
+
+    public void pushRemove(int num) {
+        if (num < 0) {
+            throw new IllegalArgumentException("Argument must be non-negative");
+        } else {
+            _remove_start += num;
+        }
+    }
+
+    public void pushInsert() {
+        _insert_start += 1;
+    }
+
+    public void pushInsert(int num) {
+        if (num < 0) {
+            throw new IllegalArgumentException("Argument must be non-negative");
+        } else {
+            _insert_start += num;
+        }
+    }
+
+    public int getRemoveStart() { return _remove_start; }
+
+    public int getInsertStart() { return _insert_start; }
+
+    public String toString() {
+        String out = String.format("DiffHunkHeader: (%d) -> (%d)", _remove_start, _insert_start);
+        return out;
+    }
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffReport.java b/jacoco/coverage_tool/src/main/java/diff/DiffReport.java
new file mode 100644
index 0000000..d715cfe
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffReport.java
@@ -0,0 +1,25 @@
+package diff;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Iterator;
+
+public class DiffReport {
+    private List<DiffFile> _files;
+
+    DiffReport() {
+        _files = new ArrayList<DiffFile>();
+    }
+
+    void pushDiffFile(DiffFile file) {
+        _files.add(file);
+    }
+
+    public Iterator<DiffFile> iterator() {
+        return _files.iterator();
+    }
+
+    public boolean isEmpty() {
+        return _files.isEmpty();
+    }
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffReportGenerator.java b/jacoco/coverage_tool/src/main/java/diff/DiffReportGenerator.java
new file mode 100644
index 0000000..0d04e86
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffReportGenerator.java
@@ -0,0 +1,75 @@
+package diff;
+
+import java.io.*;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.lang.Runtime;
+import java.lang.Process;
+import java.lang.ProcessBuilder;
+
+public class DiffReportGenerator {
+
+    public DiffReport generateReport(InputStream is) {
+        DiffScanner ds = new DiffScanner(is);
+        DiffReport dr = new DiffReport();
+        DiffFile next_df = null;
+        DiffHunkHeader dbh = null;
+        while (ds.hasNext()) {
+            if (ds.hasNextFile()) {
+                next_df = ds.nextFile();
+                dr.pushDiffFile(next_df);
+            } else if (ds.hasNextHunkHeader()) {
+                if (next_df == null) {
+                    System.err.println("ERROR: Hunk header found before file");
+                    break;
+                }
+                dbh = ds.nextHunkHeader();
+                while(ds.hasNext()) {
+                    if (ds.hasNextHunk()) {
+                        DiffHunk db = ds.nextHunk();
+                        if (db.isEmpty()) break;
+                        next_df.pushDiff(new DiffHunk(dbh.getRemoveStart() + db.getRemoveStart(),
+                                                       db.getRemoveLength(),
+                                                       dbh.getInsertStart() + db.getInsertStart(),
+                                                       db.getInsertLength()));
+                        dbh.pushRemove(db.getRemoveEnd());
+                        dbh.pushInsert(db.getInsertEnd());
+                    } else {
+                        break;
+                    }
+                }
+            } else {
+                System.err.println("ERROR: Couldn't find next");
+                break;
+            }
+        }
+        return dr;
+    }
+
+    public static void main(String[] args) {
+        if (args.length < 3) {
+            System.err.println("ERROR: Not enough arguments (needs 3)");
+            System.exit(1);
+        }
+        String[] cmd = {"git", "diff", args[0], args[1], "--", "*.java"};
+        ProcessBuilder pb = new ProcessBuilder(cmd);
+        pb.directory(new File(args[2]));
+        Process p = null;
+        DiffReportGenerator drg = new DiffReportGenerator();
+        DiffReport dr = new DiffReport();
+        try {
+            p = pb.start();
+            dr = drg.generateReport(p.getInputStream());
+            if (p.waitFor() != 0) {
+                System.err.println("ERROR: Process quit unexpectedly");
+            }
+        } catch (Exception e) {
+            System.err.println(e);
+            System.exit(1);
+        }
+        Iterator i = dr.iterator();
+        while (i.hasNext())
+            System.out.println(i.next());
+    }
+}
\ No newline at end of file
diff --git a/jacoco/coverage_tool/src/main/java/diff/DiffScanner.java b/jacoco/coverage_tool/src/main/java/diff/DiffScanner.java
new file mode 100644
index 0000000..8343461
--- /dev/null
+++ b/jacoco/coverage_tool/src/main/java/diff/DiffScanner.java
@@ -0,0 +1,195 @@
+package diff;
+
+import java.io.*;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Scanner;
+import java.util.NoSuchElementException;
+import java.util.InputMismatchException;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
+import java.util.regex.MatchResult;
+/**
+ * Wrapper class for Java's Scanner. It is designed to parse the output of a diff provided by git.
+ **/
+public class DiffScanner {
+    private static final Pattern _HUNK_HEADER_REGEX =
+            Pattern.compile("^@@\\s-(\\d+),\\d+\\s\\+(\\d+),\\d+\\s@@\\s.*$\\n", Pattern.MULTILINE);
+    private static final Pattern _HUNK_REGEX =
+            Pattern.compile("(?=^[+\\-\\s])((?:^\\s.*$\\n)*)" +
+                    "((?:^-.*$\\n)*)" +
+                    "((?:^\\+.*$\\n)*)", Pattern.MULTILINE);
+    private static final Pattern _FILE_REGEX =
+            Pattern.compile("^diff\\s.*$\\n" +
+                    "(?:^(?:new|deleted)\\sfile\\smode\\s\\w+$\\n)?" +
+                    "^index\\s\\w+\\.\\.\\w+(?:\\s\\w+)?$\\n" +
+                    "^---\\s(?:[abciow]/)?(.*)$\\n" +
+                    "^\\+\\+\\+\\s(?:[abciow]/)?(.*)$\\n", Pattern.MULTILINE);
+
+    private Scanner _sc;
+    private MatchResult _next_match = null;
+    private NextType _next_type = NextType.NONE;
+
+    private enum NextType {
+        FILE, HUNK_HEADER, HUNK, NONE
+    }
+
+    public DiffScanner(InputStream source) {
+        _sc = new Scanner(source);
+    }
+
+    public DiffScanner(File source) throws FileNotFoundException {
+        _sc = new Scanner(source);
+    }
+
+    public boolean hasNextFile() {
+        if (_next_type == NextType.FILE) {
+            return true;
+        } else if (_next_type == NextType.NONE) {
+            try {
+                _sc.skip(_FILE_REGEX);
+            } catch (NoSuchElementException nsee) {
+                return false;
+            }
+            _next_match = _sc.match();
+            _next_type = NextType.FILE;
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public DiffFile nextFile() {
+        if (_next_type == NextType.NONE) hasNextFile();
+        if (_next_type == NextType.FILE) {
+            DiffFile df = new DiffFile(Paths.get(_next_match.group(1)), Paths.get(_next_match.group(2)));
+            resetNext();
+            return df;
+        } else {
+            throw new InputMismatchException();
+        }
+    }
+
+    public boolean hasNextHunkHeader() {
+        if (_next_type == NextType.HUNK_HEADER) {
+            return true;
+        } else if (_next_type == NextType.NONE) {
+            try {
+                _sc.skip(_HUNK_HEADER_REGEX);
+            } catch (NoSuchElementException nsee) {
+                return false;
+            }
+            _next_match = _sc.match();
+            _next_type = NextType.HUNK_HEADER;
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public DiffHunkHeader nextHunkHeader() {
+        int r_start, i_start;
+
+        if (_next_type == NextType.NONE) hasNextHunkHeader();
+        if (_next_type == NextType.HUNK_HEADER) {
+            r_start = Integer.parseInt(_next_match.group(1));
+            i_start = Integer.parseInt(_next_match.group(2));
+            if (r_start > 0) r_start -= 1;
+            if (i_start > 0) i_start -= 1;
+            DiffHunkHeader dbh = new DiffHunkHeader(r_start, i_start);
+            resetNext();
+            return dbh;
+        } else {
+            throw new InputMismatchException();
+        }
+    }
+
+    public boolean hasNextHunk() {
+        if (_next_type == NextType.HUNK) {
+            return true;
+        } else if (_next_type == NextType.NONE) {
+            try {
+                _sc.skip(_HUNK_REGEX);
+            } catch (NoSuchElementException nsee) {
+                return false;
+            }
+            _next_match = _sc.match();
+            _next_type = NextType.HUNK;
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public DiffHunk nextHunk() {
+        int blank_count, remove_count, insert_count;
+        if (_next_type == NextType.NONE) hasNextHunkHeader();
+        if (_next_type == NextType.HUNK) {
+            blank_count = getLineCount(_next_match.group(1));
+            remove_count = getLineCount(_next_match.group(2));
+            insert_count = getLineCount(_next_match.group(3));
+            DiffHunk db = new DiffHunk(blank_count, remove_count, blank_count, insert_count);
+            resetNext();
+            return db;
+        } else {
+            throw new InputMismatchException();
+        }
+    }
+
+    public boolean hasNext() {
+        return _sc.hasNext();
+    }
+
+    // Helper function to count the number of lines in a string
+    // NOTE: Newlines are expected to be at the end, so the last newline will be disregarded
+    private int getLineCount(String s) {
+        if (s.isEmpty()) return 0;
+        Matcher m = Pattern.compile("\r\n|\r|\n").matcher(s);
+        int lines = 1;
+        if (m.find()) lines = 1;
+        while (m.find()) lines += 1;
+        return lines;
+    }
+
+    // Clears the _next_match and _next_type variables
+    private void resetNext() {
+        _next_type = NextType.NONE;
+        _next_match = null;
+    }
+
+    public void close() {
+        _sc.close();
+    }
+
+    public static void main(String[] args) {
+        DiffScanner ds = null;
+        try {
+            ds = new DiffScanner(new File(args[0]));
+        } catch (FileNotFoundException fnfe) {
+            System.err.println("ERROR: Could not find file '" + args[0] + "'");
+            System.exit(1);
+        } catch (ArrayIndexOutOfBoundsException aioobe) {
+            System.out.println("ERROR: File name required");
+            System.exit(1);
+        }
+        System.out.println(ds.hasNextHunkHeader());
+        System.out.println(ds.hasNextHunk());
+        System.out.println(ds.hasNextFile());
+        System.out.println(ds.nextFile());
+        System.out.println(ds.hasNextHunkHeader());
+        System.out.println(ds.hasNextHunk());
+        System.out.println(ds.hasNextFile());
+        System.out.println(ds.nextHunkHeader());
+        System.out.println(ds.hasNextHunkHeader());
+        System.out.println(ds.hasNextHunk());
+        System.out.println(ds.hasNextFile());
+        System.out.println(ds.nextHunk());
+        System.out.println(ds.hasNextHunkHeader());
+        System.out.println(ds.hasNextHunk());
+        System.out.println(ds.hasNextFile());
+        System.out.println(ds.nextHunk());
+        System.out.println(ds.hasNextHunkHeader());
+        System.out.println(ds.hasNextHunk());
+        System.out.println(ds.hasNextFile());
+    }
+}
